name: External Service Probe

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  noop:
    name: Noop when SERVICE_URL is missing
    runs-on: ubuntu-latest
    if: ${{ secrets.SERVICE_URL == '' }}
    steps:
      - name: Skip probe
        run: echo "SERVICE_URL secret is not configured; skipping external probe."

  probe:
    name: Probe external service
    runs-on: ubuntu-latest
    if: ${{ secrets.SERVICE_URL != '' }}
    timeout-minutes: 15
    env:
      SERVICE_URL: ${{ secrets.SERVICE_URL }}
    strategy:
      max-parallel: 1
      matrix:
        include:
          - name: healthz
            method: GET
            path: /healthz
          - name: readyz
            method: GET
            path: /readyz
          - name: version
            method: GET
            path: /version
          - name: cgo_submit
            method: POST
            path: /api/v1/cgo/run-marketing-campaign
            body: '{}'
          - name: a2a_submit
            method: POST
            path: /a2a/command
            body: '{"source":"external-probe","target":"ops","command":"ping","payload":{}}'
          - name: job_status
            method: GET
            path: /job_status
    steps:
      - name: Prepare workspace
        run: mkdir -p reports

      - name: Probe ${{ matrix.name }}
        timeout-minutes: 2
        env:
          NAME: ${{ matrix.name }}
          METHOD: ${{ matrix.method }}
          PATH: ${{ matrix.path }}
          BODY: ${{ matrix.body || '' }}
          SERVICE_URL: ${{ env.SERVICE_URL }}
        run: |
          set -o pipefail
          REPORT_DIR="reports"
          mkdir -p "$REPORT_DIR"
          BASE_URL="${SERVICE_URL%/}"
          URL="${BASE_URL}${PATH}"
          RESPONSE_FILE="$REPORT_DIR/${NAME}.response.txt"
          STDERR_FILE="$REPORT_DIR/${NAME}.stderr.log"

          CURL_COMMON=(
            --silent
            --show-error
            --location
            --retry 3
            --retry-delay 5
            --retry-all-errors
            --connect-timeout 5
            --max-time 20
            --write-out '%{http_code}'
            --output "$RESPONSE_FILE"
          )

          if [ "$METHOD" = "POST" ]; then
            HTTP_CODE=$(curl "${CURL_COMMON[@]}" --header 'Content-Type: application/json' --data "$BODY" --request POST "$URL" 2>"$STDERR_FILE")
          elif [ "$METHOD" = "GET" ]; then
            HTTP_CODE=$(curl "${CURL_COMMON[@]}" "$URL" 2>"$STDERR_FILE")
          else
            HTTP_CODE=$(curl "${CURL_COMMON[@]}" --request "$METHOD" "$URL" 2>"$STDERR_FILE")
          fi
          CURL_EXIT=$?

          printf '%s\n' "${HTTP_CODE}" > "$REPORT_DIR/${NAME}.status"

          cat <<JSON > "$REPORT_DIR/${NAME}.json"
          {
            "name": "${NAME}",
            "method": "${METHOD}",
            "path": "${PATH}",
            "url": "${URL}",
            "http_code": ${HTTP_CODE:-0},
            "curl_exit_code": ${CURL_EXIT},
            "response_file": "${NAME}.response.txt",
            "stderr_file": "${NAME}.stderr.log",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          JSON

          if [ $CURL_EXIT -ne 0 ]; then
            echo "curl exited with status $CURL_EXIT" >&2
          fi

          if [ "${HTTP_CODE}" = "405" ]; then
            case "$NAME" in
              cgo_submit)
                echo "Hint: CGO endpoint expects POST /api/v1/cgo/run-marketing-campaign" >&2
                ;;
              a2a_submit)
                echo "Hint: A2A endpoint expects POST /a2a/command" >&2
                ;;
              *)
                echo "Received 405 for ${METHOD} ${PATH}; verify the allowed HTTP method" >&2
                ;;
            esac
          fi

      - name: Aggregate report
        if: ${{ always() }}
        run: |
          python <<'PY'
import json
import os
from pathlib import Path

reports = Path('reports')
entries = []
for probe_file in sorted(reports.glob('*.json')):
    if probe_file.name == 'report.json':
        continue
    with probe_file.open() as fh:
        data = json.load(fh)
    response_path = reports / data.get('response_file', '')
    if response_path.exists():
        preview = response_path.read_text(errors='replace')[:500]
        data['response_preview'] = preview
    entries.append(data)

report_path = reports / 'report.json'
report_path.write_text(json.dumps({"probes": entries}, indent=2))

summary_lines = [
    "## External Service Probe",
    "",
    "| Name | Method | Path | HTTP | Curl Exit |",
    "| --- | --- | --- | --- | --- |",
]
for entry in entries:
    summary_lines.append(f"| {entry['name']} | {entry['method']} | {entry['path']} | {entry['http_code']} | {entry['curl_exit_code']} |")

summary = "\n".join(summary_lines)
summary_file = Path(os.environ['GITHUB_STEP_SUMMARY'])
summary_file.write_text(summary)
PY

      - name: Upload probe report
        uses: actions/upload-artifact@v4
        with:
          name: external-probe-report
          path: reports
